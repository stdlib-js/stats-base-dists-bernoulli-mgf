{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isProbability from '@stdlib/math-base-assert-is-probability' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport exp from '@stdlib/math-base-special-exp' ;\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a Bernoulli distribution with success probability `p` at a value `t`.\n*\n* @param {number} t - input value\n* @param {Probability} p - success probability\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.111\n*\n* @example\n* var y = mgf( 0.4, 0.5 );\n* // returns ~1.246\n*\n* @example\n* var y = mgf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( -2.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 2.0 );\n* // returns NaN\n*/\nfunction mgf( t, p ) {\n\tif ( isnan( t ) || !isProbability( p ) ) {\n\t\treturn NaN;\n\t}\n\treturn ( 1.0-p ) + ( p * exp( t ) );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport isProbability from '@stdlib/math-base-assert-is-probability' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport exp from '@stdlib/math-base-special-exp' ;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a Bernoulli distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 0.8 );\n* var y = mgf( -0.2 );\n* // returns ~0.855\n*/\nfunction factory( p ) {\n\tif ( !isProbability( p ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a Bernoulli distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( 1.0-p ) + ( p * exp( t ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a Bernoulli distribution.\n*\n* @module @stdlib/stats-base-dists-bernoulli-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-bernoulli-mgf' ;\n*\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.111\n*\n* y = mgf( 0.4, 0.5 );\n* // returns ~1.246\n*\n* var mymgf = mgf.factory( 0.8 );\n* y = mymgf( -0.2 );\n* // returns ~0.855\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["mgf","t","p","isnan","isProbability","NaN","exp","factory","constantFunction","setReadOnly","main"],"mappings":";;meA4DA,SAASA,EAAKC,EAAGC,GAChB,OAAKC,EAAOF,KAAQG,EAAeF,GAC3BG,IAEC,EAAIH,EAAQA,EAAII,EAAKL,GCvB/B,SAASM,EAASL,GACjB,OAAME,EAAeF,GAgBrB,SAAcD,GACb,GAAKE,EAAOF,GACX,OAAOI,IAER,OAAS,EAAIH,EAAQA,EAAII,EAAKL,IAnBvBO,EAAkBH,KCK3BI,EAAAC,EAAA,UAAAH"}